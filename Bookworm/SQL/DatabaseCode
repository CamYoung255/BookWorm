CREATE TABLE Books (
    BookID int NOT NULL AUTO_INCREMENT, 
    BookName VARCHAR(50), 
    Genre VARCHAR(20), 
    Rating int,
    Author VARCHAR(25), 
    NumOfPages VARCHAR(4), 
    PRIMARY KEY (BookID)
);

--First table for storing books.

INSERT INTO books (BookName, Genre, Rating,Author, NumOfPages)
VALUES 
('The Call of Cthulhu and other stories', 'Horror', 1, 'H.P. Lovecraft', '224'),
('The Dunwich Horror and other stories', 'Horror', 4, 'H.P. Lovecraft', '237'),
("The Hitch Hiker's Guide to the Galaxy", 'Sci-fi', 3, 'Douglas Adams', '776'),
('Twenty Thousand Leagues Under the Sea', 'Adventure fiction', 8, 'Jules Verne', '488'),
('Around the World in Eighty Days', 'Adventure fiction', 0, 'Jules Verne', '237'),
('The Time Machine', 'Sci-fi', 5, 'H.G.  Wells', '84'),
('The War of the Worlds', 'Sci-fi', 9, 'H.G.  Wells', '287'),
("Harry Potter and the Philosopher's Stone", 2, 'Fantasy' ,'J.K. Rowling', '287'),
('Mythology', â€˜Mythology', 6, 'Edith Hamilton', '371');

--Insert statement to populate the table.

CREATE TABLE Users(
    ID int NOT NULL AUTO_INCREMENT, 
    UsernameVARCHAR(15) NOT NULL, 
    Password VARCHAR(75) NOT NULL, 
   PRIMARY KEY (BookID)

   );

--Second table for users, will be populated when a user is created.

CREATE TABLE Comments (
    Content VARCHAR(250) NOT NULL, 
    TimePosted VARCHAR(30) NOT NULL, 
    FKUserID VARCHAR(20) NOT NULL, 
    FKBookID VARCHAR(25) NOT NULL,
   GOrB VARCHAR() NOT NULL,
    CONSTRAINT FK_UserID
    FOREIGN KEY (FKUserID) 
        REFERENCES users (UserID),
    CONSTRAINT FK_BookID
    FOREIGN KEY (FKBookID) 
        REFERENCES books (BookID) 
);

--Second table for storing user comments, will be populated when a comment is created.
